version: '3'
volumes:
  avalanche-data:
  avalanche-ipcs:
networks:
  services:
    external:
      name: ortelius_services
services:
  avalanche:
    env_file:
      - standalone.env
    image: "avaplatform/avalanchego:v1.1.4"
    command: /bin/sh -cx "exec ./build/avalanchego
      --network-id=$${NETWORKID}
      --db-dir=/var/lib/avalanche
      --log-level=info
      --http-host=0.0.0.0
      --ipcs-chain-ids=$${P_CHAINID},$${X_CHAINID}
      --coreth-config='{\"rpc-gas-cap\":2500000000,\"rpc-tx-fee-cap\":100,\"eth-api-enabled\":true,\"debug-api-enabled\":true,\"tx-pool-api-enabled\":true}'
      "
    ports:
      - "9650:9650"
    volumes:
      - avalanche-data:/var/lib/avalanche
      - avalanche-ipcs:/tmp
    depends_on:
      - producer
    restart: always
  kafkatopics:
    env_file:
      - standalone.env
    networks:
      - services
    image: "confluentinc/cp-kafka:5.4.3"
    command: bash -cx "kafka-topics --bootstrap-server $${KAFKA_HOST} --list &&
      kafka-topics --create --if-not-exists --zookeeper $${ZOOKEEPER_HOST} --replication-factor $${KAFKA_REPLICATIONFACTOR} --partitions $${KAFKA_NUMPARTITIONS} --topic $${NETWORKID}-$${C_CHAINID}-cchain &&
      kafka-topics --create --if-not-exists --zookeeper $${ZOOKEEPER_HOST} --replication-factor $${KAFKA_REPLICATIONFACTOR} --partitions $${KAFKA_NUMPARTITIONS} --topic $${NETWORKID}-$${P_CHAINID}-consensus &&
      kafka-topics --create --if-not-exists --zookeeper $${ZOOKEEPER_HOST} --replication-factor $${KAFKA_REPLICATIONFACTOR} --partitions $${KAFKA_NUMPARTITIONS} --topic $${NETWORKID}-$${P_CHAINID}-decisions &&
      kafka-topics --create --if-not-exists --zookeeper $${ZOOKEEPER_HOST} --replication-factor $${KAFKA_REPLICATIONFACTOR} --partitions $${KAFKA_NUMPARTITIONS} --topic $${NETWORKID}-$${X_CHAINID}-consensus &&
      kafka-topics --create --if-not-exists --zookeeper $${ZOOKEEPER_HOST} --replication-factor $${KAFKA_REPLICATIONFACTOR} --partitions $${KAFKA_NUMPARTITIONS} --topic $${NETWORKID}-$${X_CHAINID}-decisions
      "
    external_links:
      - zookeeper
      - kafka
  producer: &ortelius-app
    image: "avaplatform/ortelius:6883f45"
    command: ["stream", "producer", "-c", "/opt/config.json"]
    networks:
      - services
    external_links:
      - zookeeper
      - kafka
      - mysql
      - redis
    volumes:
      - avalanche-ipcs:/tmp
      - ./config.standalone.json:/opt/config.json
    depends_on:
      - kafkatopics
    restart: on-failure
  indexer:
    <<: *ortelius-app
    command: ["stream", "indexer", "-c", "/opt/config.json"]
  api:
    <<: *ortelius-app
    command: ["api", "-c", "/opt/config.json"]
    ports:
      - 8080:8080
