version: '3'
volumes:
  avalanche-data:
  avalanche-ipcs:
networks:
  services:
    external:
      name: ortelius_services
services:
  avalanche:
    env_file:
      - standalone.env
    image: "avaplatform/avalanchego:v1.0.5"
    command: [
      "./build/avalanchego",
      "--network-id=${NETWORK-ID}",
      "--db-dir=/var/lib/avalanche",
      "--log-level=info",
      "--http-host=0.0.0.0",
      "--ipcs-chain-ids=${C-CHAIN-ID},${X-CHAIN-ID}",
    ]
    ports:
      - "9650:9650"
    volumes:
      - avalanche-data:/var/lib/avalanche
      - avalanche-ipcs:/tmp
    depends_on:
      - producer
    restart: always
  kafkatopics:
    image: "kafka-cli:latest"
    command: >
      kafka-topics --create --if-not-exists --zookeeper ${KAFKA-HOST} --replication-factor ${KAFKA-REPLICATION-FACTOR} --partitions ${KAFKA-NUM-PARTITIONS} --topic ${NETWORK-ID}-${C-CHAIN-ID}-consensus
      && kafka-topics --create --if-not-exists --zookeeper ${KAFKA-HOST} --replication-factor ${KAFKA-REPLICATION-FACTOR} --partitions ${KAFKA-NUM-PARTITIONS} --topic ${NETWORK-ID}-${C-CHAIN-ID}-decisions
      && kafka-topics --create --if-not-exists--zookeeper ${KAFKA-HOST} --replication-factor ${KAFKA-REPLICATION-FACTOR} --partitions ${KAFKA-NUM-PARTITIONS} --topic ${NETWORK-ID}-${X-CHAIN-ID}-consensus
      && afka-topics --create --if-not-exists --zookeeper ${KAFKA-HOST} --replication-factor ${KAFKA-REPLICATION-FACTOR} --partitions ${KAFKA-NUM-PARTITIONS} --topic ${NETWORK-ID}-${X-CHAIN-ID}-decisions
  producer: &ortelius-app
    image: "avaplatform/ortelius:98a665b"
    command: ["stream", "producer", "-c", "/opt/config.json"]
    networks:
      - services
    external_links:
      - zookeeper
      - kafka
      - mysql
      - redis
    volumes:
      - avalanche-ipcs:/tmp
    depends_on:
      - kafkatopics
    restart: on-failure
  indexer:
    <<: *ortelius-app
    command: ["stream", "indexer", "-c", "/opt/config.json"]
  api:
    <<: *ortelius-app
    command: ["api", "-c", "/opt/config.json"]
    ports:
      - 8080:8080
